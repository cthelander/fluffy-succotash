/* The following code was generated by JFlex 1.4.3 on 1/29/15 4:12 PM */

// Carly Thelander


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/29/15 4:12 PM from the specification file
 * <tt>AutoLight.jflex</tt>
 */
class AutoLight {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\25\1\0\1\26\1\24\22\0\1\26\12\0\1\14"+
    "\1\0\1\14\1\11\1\15\1\1\1\2\1\3\1\5\1\22\1\6"+
    "\4\23\1\4\5\0\1\12\1\7\13\13\1\10\2\13\1\7\12\13"+
    "\4\0\1\14\1\0\1\7\6\13\1\16\4\13\1\10\2\13\1\20"+
    "\2\13\1\21\1\17\6\13\3\0\1\14\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\11\1\25\0\4\1\1\0\1\1\4\0\3\1"+
    "\2\2\3\0\3\1\4\0\1\1\1\3\3\1\1\4"+
    "\2\0\2\1\1\2\5\0\1\1\1\0\1\3\1\0"+
    "\1\1\1\0\1\4\3\1\4\2\1\0\3\2\1\5"+
    "\3\0\1\3\2\0\3\1\1\4\2\0\2\1\1\2"+
    "\1\0\1\2\1\0\2\2\4\0\1\1\1\2\1\3"+
    "\3\0\3\6\3\2\1\0\3\2\1\1\2\0\1\3"+
    "\1\0\3\6\1\0\2\6\1\2\2\0\2\2\4\0"+
    "\11\1\3\0\2\1\1\0\1\7\1\0\1\1\4\0"+
    "\2\7\2\1\1\0\1\7\1\0\1\1\1\7\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\241"+
    "\0\270\0\317\0\346\0\375\0\u0114\0\u012b\0\241\0\u0142"+
    "\0\u0159\0\u0170\0\u0187\0\u019e\0\u01b5\0\u01cc\0\u01e3\0\u01fa"+
    "\0\u0211\0\u0228\0\212\0\u023f\0\u0256\0\u026d\0\u0284\0\u029b"+
    "\0\u02b2\0\u0114\0\u02c9\0\u02e0\0\u01e3\0\u02c9\0\u02f7\0\u029b"+
    "\0\u02b2\0\u030e\0\u0325\0\u033c\0\u0353\0\u036a\0\u0381\0\u0398"+
    "\0\u03af\0\u0398\0\u03af\0\u0381\0\u03c6\0\u03dd\0\u03f4\0\u040b"+
    "\0\u0422\0\u0422\0\u0439\0\u0450\0\u0467\0\u047e\0\u0495\0\u04ac"+
    "\0\u04c3\0\u04da\0\u04f1\0\u0508\0\u051f\0\u0536\0\u054d\0\u0564"+
    "\0\u057b\0\u0592\0\u05a9\0\u05c0\0\u05d7\0\u05ee\0\u0605\0\u061c"+
    "\0\u0633\0\u064a\0\u0661\0\u0678\0\u068f\0\u06a6\0\u06bd\0\u06d4"+
    "\0\u06eb\0\u0702\0\u0719\0\u0730\0\u0747\0\u075e\0\u0775\0\u078c"+
    "\0\u07a3\0\u07ba\0\u07d1\0\u07e8\0\27\0\u07ff\0\u0816\0\u082d"+
    "\0\u0844\0\u085b\0\u0872\0\u0889\0\u08a0\0\u08b7\0\u08ce\0\u08e5"+
    "\0\u08fc\0\u0913\0\u092a\0\u0775\0\u0941\0\u05d7\0\u0958\0\u096f"+
    "\0\u0986\0\u099d\0\u09b4\0\u09cb\0\u09e2\0\u09f9\0\u0a10\0\u0a27"+
    "\0\u0a3e\0\u0a55\0\u0a6c\0\u0a83\0\u0a9a\0\u0ab1\0\u0ac8\0\u0adf"+
    "\0\u0af6\0\u0b0d\0\u0b24\0\u0b3b\0\u0b52\0\u0b69\0\u0b80\0\u0b97"+
    "\0\u0bae\0\u0bc5\0\u0bdc\0\u0bf3\0\u0c0a\0\u0c21\0\u0c38\0\u0c4f"+
    "\0\u0c66\0\u0b3b\0\u0b97\0\u0b69\0\u0c7d\0\u0c94\0\u0cab\0\u0cc2"+
    "\0\u0cd9\0\u0cf0\0\u0d07\0\u0d1e\0\u09f9\0\u0d35\0\u0d4c\0\u0d63"+
    "\0\u0d7a\0\u0d91\0\u0da8\0\u0dbf\0\u0dd6\0\u0ded\0\u0e04\0\u0e1b"+
    "\0\u0e32\0\u0e49\0\u0e60\0\u0e77\0\u0e8e\0\u0ea5\0\u0ebc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\2\6\2\7\2\2"+
    "\1\7\1\10\1\2\1\11\3\7\2\6\1\12\2\2"+
    "\30\0\2\13\1\14\1\15\2\16\2\17\1\20\1\0"+
    "\1\17\1\21\1\0\4\17\2\16\4\0\2\13\1\14"+
    "\1\15\2\22\2\17\1\20\1\0\1\17\1\21\1\0"+
    "\4\17\2\22\4\0\2\23\1\24\1\15\1\22\1\25"+
    "\2\17\1\20\1\0\1\17\1\21\1\0\4\17\1\26"+
    "\1\27\4\0\2\30\1\31\1\15\2\27\2\17\1\20"+
    "\1\0\1\17\1\21\1\0\4\17\2\27\4\0\3\32"+
    "\1\0\2\32\2\33\1\34\1\35\1\33\1\17\1\0"+
    "\1\36\3\33\2\32\4\0\3\17\1\0\4\17\1\34"+
    "\1\0\2\17\1\0\6\17\4\0\3\32\1\0\2\32"+
    "\2\33\1\34\1\35\1\33\1\17\1\0\1\36\1\37"+
    "\2\33\2\32\30\0\1\2\2\0\2\40\1\41\1\42"+
    "\2\43\2\17\1\44\1\0\2\17\1\0\4\17\1\43"+
    "\1\45\4\0\2\40\1\41\1\42\1\43\1\46\2\17"+
    "\1\44\1\0\2\17\1\0\4\17\1\46\1\27\4\0"+
    "\3\47\1\0\2\47\13\0\1\47\5\0\2\50\1\51"+
    "\1\42\2\46\2\17\1\44\1\0\2\17\1\0\4\17"+
    "\1\46\1\27\4\0\2\52\1\53\1\0\2\54\2\55"+
    "\1\0\1\35\1\55\1\56\1\0\4\55\2\54\4\0"+
    "\3\32\1\0\2\32\2\21\1\34\1\35\1\21\1\17"+
    "\1\0\4\21\2\32\4\0\2\50\1\51\1\2\2\46"+
    "\2\17\1\44\1\0\2\17\1\0\4\17\1\46\1\27"+
    "\4\0\2\40\1\41\1\2\2\43\2\17\1\44\1\0"+
    "\2\17\1\0\4\17\1\43\1\45\4\0\2\40\1\41"+
    "\1\2\1\43\1\46\2\17\1\44\1\0\2\17\1\0"+
    "\4\17\1\46\1\27\4\0\2\30\1\31\1\2\2\27"+
    "\2\17\1\44\1\0\2\17\1\0\4\17\1\27\1\57"+
    "\4\0\2\30\1\31\1\2\2\27\2\17\1\44\1\0"+
    "\2\17\1\0\4\17\2\27\4\0\2\60\1\61\1\2"+
    "\2\57\2\17\1\44\1\0\2\17\1\0\4\17\2\57"+
    "\4\0\2\62\1\63\1\2\2\64\2\17\1\44\1\0"+
    "\2\17\1\0\4\17\2\64\4\0\2\62\1\63\1\2"+
    "\1\64\1\57\2\17\1\44\1\0\2\17\1\0\4\17"+
    "\2\57\4\0\3\17\1\0\4\17\1\65\1\0\1\17"+
    "\1\21\1\0\6\17\4\0\3\56\1\0\4\56\2\0"+
    "\2\56\1\0\6\56\4\0\3\66\1\0\4\66\2\0"+
    "\2\66\1\0\6\66\4\0\3\32\1\0\2\32\2\33"+
    "\1\34\1\35\1\33\1\17\1\0\1\36\1\67\2\33"+
    "\2\32\4\0\3\32\1\0\2\32\2\33\1\34\1\35"+
    "\1\33\1\17\1\0\1\36\1\70\2\33\2\32\4\0"+
    "\3\71\1\2\2\71\2\17\1\44\1\0\2\17\1\0"+
    "\4\17\2\71\4\0\3\71\1\2\1\71\1\72\2\17"+
    "\1\44\1\0\2\17\1\0\4\17\2\72\4\0\3\72"+
    "\1\2\2\72\2\17\1\44\1\0\2\17\1\0\4\17"+
    "\2\72\4\0\2\73\1\74\1\0\2\75\2\56\2\0"+
    "\2\56\1\0\4\56\2\75\4\0\3\76\1\0\2\76"+
    "\13\0\2\76\4\0\3\75\1\0\2\75\2\56\1\77"+
    "\1\0\1\56\1\55\1\100\4\56\2\75\4\0\3\75"+
    "\1\0\1\75\1\101\2\56\1\77\1\0\1\56\1\55"+
    "\1\100\4\56\1\75\1\102\4\0\3\102\1\0\2\102"+
    "\2\56\1\77\1\0\1\56\1\55\1\100\4\56\2\102"+
    "\4\0\3\103\1\0\2\103\2\55\1\104\1\35\1\55"+
    "\1\56\1\100\4\55\2\103\4\0\3\56\1\0\4\56"+
    "\1\104\1\0\2\56\1\100\6\56\4\0\2\60\1\61"+
    "\1\2\2\57\2\17\1\105\1\0\2\17\1\0\4\17"+
    "\2\57\4\0\2\62\1\63\1\2\2\64\2\17\1\105"+
    "\1\0\2\17\1\0\4\17\2\64\4\0\2\62\1\63"+
    "\1\2\1\64\1\57\2\17\1\105\1\0\2\17\1\0"+
    "\4\17\2\57\4\0\3\103\1\0\2\103\2\55\1\0"+
    "\1\35\1\55\1\56\1\0\4\55\2\103\4\0\3\66"+
    "\1\0\4\66\1\106\1\0\2\66\1\0\6\66\4\0"+
    "\3\32\1\0\2\32\2\33\1\34\1\35\1\33\1\17"+
    "\1\0\1\36\1\107\2\33\2\32\4\0\3\32\1\0"+
    "\2\32\2\33\1\34\1\35\1\33\1\17\1\0\1\36"+
    "\1\33\1\110\1\33\2\32\4\0\3\111\1\2\2\111"+
    "\1\112\1\17\1\105\1\0\2\17\1\0\2\17\1\112"+
    "\1\17\2\111\3\113\1\0\3\75\1\0\2\75\2\56"+
    "\1\114\1\0\2\56\1\100\4\56\2\75\4\0\3\75"+
    "\1\0\1\75\1\101\2\56\1\114\1\0\2\56\1\100"+
    "\4\56\1\75\1\102\4\0\3\102\1\0\2\102\2\56"+
    "\1\114\1\0\2\56\1\100\4\56\2\102\4\0\3\115"+
    "\1\0\2\115\1\116\10\0\1\116\1\0\2\115\3\117"+
    "\1\0\2\120\1\121\1\0\2\122\2\123\1\0\1\35"+
    "\1\123\1\124\1\0\4\123\2\122\4\0\3\125\1\0"+
    "\4\125\2\0\2\125\1\0\6\125\4\0\3\102\1\0"+
    "\2\102\2\56\1\114\1\0\2\56\1\100\4\56\1\102"+
    "\1\126\4\0\3\126\1\0\2\126\2\56\1\114\1\0"+
    "\2\56\1\100\4\56\2\126\4\0\3\56\1\0\4\56"+
    "\1\127\1\0\1\56\1\55\1\100\6\56\4\0\3\124"+
    "\1\0\4\124\2\0\2\124\1\0\6\124\4\0\2\130"+
    "\1\131\1\0\2\132\2\56\2\0\2\56\1\0\4\56"+
    "\2\132\4\0\3\133\1\0\4\133\2\0\2\133\1\0"+
    "\6\133\4\0\3\32\1\0\2\32\2\33\1\34\1\35"+
    "\1\33\1\17\1\0\1\36\1\33\1\134\1\33\2\32"+
    "\4\0\3\32\1\135\2\32\2\33\1\34\1\35\1\33"+
    "\1\17\1\0\1\36\2\33\1\136\2\32\4\0\3\111"+
    "\1\2\2\111\2\17\1\105\1\0\2\17\1\0\4\17"+
    "\2\111\4\0\3\17\1\0\3\17\1\137\1\140\1\0"+
    "\2\17\1\0\6\17\4\0\3\115\1\0\2\115\1\141"+
    "\10\0\1\141\1\0\2\115\3\113\1\0\2\142\1\143"+
    "\1\0\2\144\2\124\2\0\2\124\1\0\4\124\2\144"+
    "\4\0\3\115\1\0\2\115\13\0\2\115\13\0\1\145"+
    "\1\146\24\0\1\116\10\0\1\116\3\0\3\117\1\0"+
    "\3\144\1\0\2\144\2\124\1\147\1\0\1\124\1\123"+
    "\1\100\4\124\2\144\4\0\3\144\1\0\1\144\1\150"+
    "\2\124\1\147\1\0\1\124\1\123\1\100\4\124\1\144"+
    "\1\151\4\0\3\151\1\0\2\151\2\124\1\147\1\0"+
    "\1\124\1\123\1\100\4\124\2\151\4\0\3\152\1\0"+
    "\2\152\2\123\1\153\1\35\1\123\1\124\1\100\4\123"+
    "\2\152\4\0\3\124\1\0\4\124\1\153\1\0\2\124"+
    "\1\100\6\124\4\0\3\125\1\0\4\125\2\0\2\125"+
    "\1\154\6\125\4\0\3\126\1\0\2\126\2\56\1\155"+
    "\1\0\2\56\1\100\4\56\2\126\4\0\3\152\1\0"+
    "\2\152\2\123\1\0\1\35\1\123\1\124\1\0\4\123"+
    "\2\152\4\0\3\132\1\0\2\132\2\56\1\155\1\0"+
    "\2\56\1\100\4\56\2\132\4\0\3\132\1\0\1\132"+
    "\1\156\2\56\1\155\1\0\2\56\1\100\4\56\1\132"+
    "\1\157\4\0\3\157\1\0\2\157\2\56\1\155\1\0"+
    "\2\56\1\100\4\56\2\157\4\0\3\133\1\0\4\133"+
    "\1\160\1\0\2\133\1\0\6\133\4\0\3\32\1\161"+
    "\2\32\2\33\1\34\1\35\1\33\1\17\1\0\1\36"+
    "\2\33\1\162\2\32\20\0\1\163\12\0\3\32\1\135"+
    "\2\32\2\33\1\34\1\35\1\33\1\17\1\0\1\36"+
    "\3\33\2\32\4\0\3\164\1\0\2\164\2\17\1\34"+
    "\1\0\2\17\1\0\4\17\2\164\4\0\3\56\1\0"+
    "\3\56\1\165\2\0\2\56\1\0\6\56\13\0\1\166"+
    "\1\167\16\0\3\144\1\0\2\144\2\124\1\170\1\0"+
    "\2\124\1\100\4\124\2\144\4\0\3\144\1\0\1\144"+
    "\1\150\2\124\1\170\1\0\2\124\1\100\4\124\1\144"+
    "\1\151\4\0\3\151\1\0\2\151\2\124\1\170\1\0"+
    "\2\124\1\100\4\124\2\151\13\0\1\171\17\0\2\172"+
    "\1\173\1\0\2\174\2\175\1\0\1\35\1\175\1\176"+
    "\1\0\4\175\2\174\4\0\3\151\1\0\2\151\2\124"+
    "\1\170\1\0\2\124\1\100\4\124\1\151\1\177\4\0"+
    "\3\177\1\0\2\177\2\124\1\170\1\0\2\124\1\100"+
    "\4\124\2\177\4\0\3\124\1\0\4\124\1\200\1\0"+
    "\1\124\1\123\1\100\6\124\4\0\3\176\1\0\4\176"+
    "\2\0\2\176\1\0\6\176\4\0\3\125\1\0\4\125"+
    "\2\0\2\125\1\100\6\125\4\0\2\201\1\202\1\0"+
    "\2\203\2\124\2\0\2\124\1\0\4\124\2\203\4\0"+
    "\3\157\1\0\2\157\2\56\1\155\1\0\2\56\1\100"+
    "\4\56\1\157\1\56\4\0\3\56\1\0\4\56\1\155"+
    "\1\0\2\56\1\100\6\56\4\0\3\204\1\0\4\204"+
    "\2\0\2\204\1\0\6\204\20\0\1\205\12\0\3\32"+
    "\1\161\2\32\2\33\1\34\1\35\1\33\1\17\1\0"+
    "\1\36\3\33\2\32\20\0\1\206\12\0\3\56\1\0"+
    "\4\56\1\207\1\0\2\56\1\100\6\56\13\0\1\210"+
    "\17\0\2\211\1\212\1\0\2\213\2\176\2\0\2\176"+
    "\1\0\4\176\2\213\14\0\1\145\16\0\3\213\1\0"+
    "\2\213\2\176\1\214\1\0\1\176\1\175\1\100\4\176"+
    "\2\213\4\0\3\213\1\0\1\213\1\215\2\176\1\214"+
    "\1\0\1\176\1\175\1\100\4\176\1\213\1\216\4\0"+
    "\3\216\1\0\2\216\2\176\1\214\1\0\1\176\1\175"+
    "\1\100\4\176\2\216\4\0\3\217\1\0\2\217\2\175"+
    "\1\220\1\35\1\175\1\176\1\100\4\175\2\217\4\0"+
    "\3\176\1\0\4\176\1\220\1\0\2\176\1\100\6\176"+
    "\4\0\3\177\1\0\2\177\2\124\1\221\1\0\2\124"+
    "\1\100\4\124\2\177\4\0\3\217\1\0\2\217\2\175"+
    "\1\0\1\35\1\175\1\176\1\0\4\175\2\217\4\0"+
    "\3\203\1\0\2\203\2\124\1\221\1\0\2\124\1\100"+
    "\4\124\2\203\4\0\3\203\1\0\1\203\1\222\2\124"+
    "\1\221\1\0\2\124\1\100\4\124\1\203\1\223\4\0"+
    "\3\223\1\0\2\223\2\124\1\221\1\0\2\124\1\100"+
    "\4\124\2\223\4\0\3\204\1\0\4\204\1\224\1\0"+
    "\2\204\1\0\6\204\20\0\1\225\12\0\3\226\1\0"+
    "\4\226\2\0\2\226\1\227\6\226\4\0\3\230\1\0"+
    "\2\230\2\124\2\0\2\124\1\0\4\124\2\230\14\0"+
    "\1\166\16\0\3\213\1\0\2\213\2\176\1\220\1\0"+
    "\2\176\1\100\4\176\2\213\4\0\3\213\1\0\1\213"+
    "\1\215\2\176\1\220\1\0\2\176\1\100\4\176\1\213"+
    "\1\216\4\0\3\216\1\0\2\216\2\176\1\220\1\0"+
    "\2\176\1\100\4\176\2\216\4\0\3\231\1\0\2\231"+
    "\2\232\1\0\1\35\1\232\1\233\1\0\4\232\2\231"+
    "\4\0\3\216\1\0\2\216\2\176\1\220\1\0\2\176"+
    "\1\100\4\176\1\216\1\234\4\0\3\234\1\0\2\234"+
    "\2\176\1\220\1\0\2\176\1\100\4\176\2\234\4\0"+
    "\3\176\1\0\4\176\1\214\1\0\1\176\1\175\1\100"+
    "\6\176\4\0\3\233\1\0\4\233\2\0\2\233\1\0"+
    "\6\233\4\0\2\235\1\236\1\0\2\237\2\176\2\0"+
    "\2\176\1\0\4\176\2\237\4\0\3\223\1\0\2\223"+
    "\2\124\1\221\1\0\2\124\1\100\4\124\1\223\1\124"+
    "\4\0\3\124\1\0\4\124\1\221\1\0\2\124\1\100"+
    "\6\124\4\0\3\240\1\0\4\240\2\0\2\240\1\0"+
    "\6\240\4\0\3\241\1\0\4\241\2\0\2\241\1\0"+
    "\6\241\4\0\3\226\1\0\4\226\1\242\1\0\2\226"+
    "\1\0\6\226\4\0\3\241\1\0\4\241\2\0\2\241"+
    "\1\227\6\241\4\0\3\230\1\0\2\230\2\124\1\153"+
    "\1\0\2\124\1\100\4\124\2\230\4\0\3\233\1\0"+
    "\4\233\1\243\1\0\1\233\1\232\1\0\6\233\4\0"+
    "\3\237\1\0\2\237\2\176\1\220\1\0\2\176\1\100"+
    "\4\176\2\237\4\0\3\237\1\0\1\237\1\244\2\176"+
    "\1\220\1\0\2\176\1\100\4\176\1\237\1\245\4\0"+
    "\3\245\1\0\2\245\2\176\1\220\1\0\2\176\1\100"+
    "\4\176\2\245\4\0\3\240\1\0\4\240\1\220\1\0"+
    "\2\240\1\0\6\240\4\0\3\241\1\0\4\241\1\246"+
    "\1\0\2\241\1\0\6\241\4\0\3\247\1\0\4\247"+
    "\2\0\2\247\1\0\6\247\4\0\3\250\1\0\2\250"+
    "\2\243\1\0\1\35\1\243\2\0\4\243\2\250\4\0"+
    "\3\245\1\0\2\245\2\176\1\220\1\0\2\176\1\100"+
    "\4\176\1\245\1\176\4\0\3\251\1\0\4\251\2\0"+
    "\2\251\1\0\6\251\4\0\3\247\1\0\4\247\1\252"+
    "\1\0\2\247\1\253\6\247\14\0\1\243\2\0\1\243"+
    "\13\0\3\251\1\0\4\251\1\254\1\0\2\251\1\255"+
    "\6\251\4\0\3\256\1\0\4\256\2\0\2\256\1\0"+
    "\6\256\4\0\3\257\1\0\4\257\2\0\2\257\1\0"+
    "\6\257\4\0\3\260\1\0\4\260\2\0\2\260\1\0"+
    "\6\260\4\0\3\261\1\0\4\261\2\0\2\261\1\0"+
    "\6\261\4\0\3\256\1\0\4\256\1\262\1\0\2\256"+
    "\1\253\6\256\4\0\3\257\1\0\4\257\2\0\2\257"+
    "\1\263\6\257\4\0\3\260\1\0\4\260\1\264\1\0"+
    "\2\260\1\255\6\260\4\0\3\261\1\0\4\261\2\0"+
    "\2\261\1\265\6\261\4\0\3\266\1\0\4\266\2\0"+
    "\2\266\1\0\6\266\4\0\3\257\1\0\4\257\2\0"+
    "\2\257\1\253\6\257\4\0\3\267\1\0\4\267\2\0"+
    "\2\267\1\0\6\267\4\0\3\261\1\0\4\261\2\0"+
    "\2\261\1\255\6\261\4\0\3\266\1\0\4\266\2\0"+
    "\2\266\1\253\6\266\4\0\3\267\1\0\4\267\2\0"+
    "\2\267\1\255\6\267\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3795];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\25\0\4\1\1\0\1\1\4\0"+
    "\5\1\3\0\3\1\4\0\6\1\2\0\3\1\5\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\10\1\1\0"+
    "\4\1\3\0\1\1\2\0\3\1\1\11\2\0\3\1"+
    "\1\0\1\1\1\0\2\1\4\0\3\1\3\0\6\1"+
    "\1\0\4\1\2\0\1\1\1\0\3\1\1\0\3\1"+
    "\2\0\2\1\4\0\11\1\3\0\2\1\1\0\1\1"+
    "\1\0\1\1\4\0\4\1\1\0\1\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  void echo() {
    int len = yylength();       // Find length of current lexeme
    for (int i=0; i<len; i++) { // Run through each character in turn
      char c = yycharat(i);   
      switch (c) {              // and translate as appropriate ...
        case '<' : System.out.print("&lt;");  break;
        case '>' : System.out.print("&gt;");  break;
        case '&' : System.out.print("&amp;"); break;
        default  : System.out.print(c);       break;
      }
    }
  }
  void tag(String cl) {
    System.out.print("<a href=\"" + cl + "://");
    echo();
    System.out.print("\">");
    echo();
    System.out.print("</a>");
  }
  void tag2() {
    System.out.print("<a href=\"" );
    echo();
    System.out.print("\">");
    echo();
    System.out.print("</a>");
  }
  void time12()     { tag("clock"); }
  void time24()     { tag("clock"); }
  void email()      { tag("mailto"); }
  void ipAdd()      { tag("ping"); }
  void website()    { tag("http"); }
  void preWeb()     { tag2(); }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AutoLight(java.io.Reader in) {
    System.out.println("<html>");
  System.out.println("<head>");
  System.out.println("<title>My AutoLight Web Page</title>");
  System.out.println("<style type=\"text/css\">");
  System.out.println("  body     {white-space:pre;");
  System.out.println("            background-color:#ffffcc;");
  System.out.println("            color:black;");
  System.out.println("            font-family:\"Lucida Console\",\"Courier New\",Monotype}");
  System.out.println("</style>");
  System.out.println("</head>");
  System.out.println("<body>");
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AutoLight(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 94) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      System.out.println("</body>");
  System.out.println("</html>");

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { ipAdd();
          }
        case 8: break;
        case 1: 
          { echo();
          }
        case 9: break;
        case 7: 
          { preWeb();
          }
        case 10: break;
        case 5: 
          { email();
          }
        case 11: break;
        case 2: 
          { website();
          }
        case 12: break;
        case 4: 
          { time12();
          }
        case 13: break;
        case 3: 
          { time24();
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AutoLight <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AutoLight scanner = null;
        try {
          scanner = new AutoLight( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
