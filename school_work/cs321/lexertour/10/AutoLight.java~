/* The following code was generated by JFlex 1.4.3 on 1/28/15 10:59 AM */

// Carly Thelander


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/28/15 10:59 AM from the specification file
 * <tt>AutoLight.jflex</tt>
 */
class AutoLight {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\25\1\0\1\26\1\24\22\0\1\26\1\30\4\0"+
    "\1\31\1\0\1\0\1\0\1\0\1\14\1\0\1\14\1\11\1\15"+
    "\1\1\1\2\1\3\1\5\1\22\1\6\4\23\1\4\1\0\1\30"+
    "\1\27\1\30\1\0\1\12\1\7\13\13\1\10\2\13\1\7\12\13"+
    "\1\0\1\0\1\0\1\0\1\14\1\0\1\7\6\13\1\16\4\13"+
    "\1\10\2\13\1\20\2\13\1\21\1\17\6\13\1\0\1\32\1\0"+
    "\1\14\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\14\1\25\0\4\1\1\0\1\1\4\0\3\1"+
    "\2\2\3\0\3\1\4\0\1\1\1\3\3\1\1\4"+
    "\2\0\2\1\1\2\5\0\1\1\1\0\1\3\1\0"+
    "\1\1\1\0\1\4\3\1\4\2\1\0\3\2\1\5"+
    "\3\0\1\3\2\0\3\1\1\4\2\0\2\1\1\2"+
    "\1\0\1\2\1\0\2\2\4\0\1\1\1\2\1\3"+
    "\3\0\3\6\3\2\1\0\3\2\1\1\2\0\1\3"+
    "\1\0\3\6\1\0\2\6\1\2\2\0\2\2\4\0"+
    "\11\1\3\0\2\1\1\0\1\7\1\0\1\1\4\0"+
    "\2\7\2\1\1\0\1\7\1\0\1\1\1\7\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\275\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252"+
    "\0\u026d\0\u0288\0\u02a3\0\u02be\0\u02d9\0\242\0\u02f4\0\u030f"+
    "\0\u032a\0\u0345\0\u0360\0\u037b\0\u0195\0\u0396\0\u03b1\0\u0288"+
    "\0\u0396\0\u03cc\0\u0360\0\u037b\0\u03e7\0\u0402\0\u041d\0\u0438"+
    "\0\u0453\0\u046e\0\u0489\0\u04a4\0\u0489\0\u04a4\0\u046e\0\u04bf"+
    "\0\u04da\0\u04f5\0\u0510\0\u052b\0\u052b\0\u0546\0\u0561\0\u057c"+
    "\0\u0597\0\u05b2\0\u05cd\0\u05e8\0\u0603\0\u061e\0\u0639\0\u0654"+
    "\0\u066f\0\u068a\0\u06a5\0\u06c0\0\u06db\0\u06f6\0\u0711\0\u072c"+
    "\0\u0747\0\u0762\0\u077d\0\u0798\0\u07b3\0\u07ce\0\u07e9\0\u0804"+
    "\0\u081f\0\u083a\0\u0855\0\u0870\0\u088b\0\u08a6\0\u08c1\0\u08dc"+
    "\0\u08f7\0\u0912\0\u092d\0\u0948\0\u0963\0\u097e\0\u0999\0\33"+
    "\0\u09b4\0\u09cf\0\u09ea\0\u0a05\0\u0a20\0\u0a3b\0\u0a56\0\u0a71"+
    "\0\u0a8c\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0b13\0\u0912\0\u0b2e"+
    "\0\u072c\0\u0b49\0\u0b64\0\u0b7f\0\u0b9a\0\u0bb5\0\u0bd0\0\u0beb"+
    "\0\u0c06\0\u0c21\0\u0c3c\0\u0c57\0\u0c72\0\u0c8d\0\u0ca8\0\u0cc3"+
    "\0\u0cde\0\u0cf9\0\u0d14\0\u0d2f\0\u0d4a\0\u0d65\0\u0d80\0\u0d9b"+
    "\0\u0db6\0\u0dd1\0\u0dec\0\u0e07\0\u0e22\0\u0e3d\0\u0e58\0\u0e73"+
    "\0\u0e8e\0\u0ea9\0\u0ec4\0\u0edf\0\u0d80\0\u0dec\0\u0db6\0\u0efa"+
    "\0\u0f15\0\u0f30\0\u0f4b\0\u0f66\0\u0f81\0\u0f9c\0\u0fb7\0\u0c06"+
    "\0\u0fd2\0\u0fed\0\u1008\0\u1023\0\u103e\0\u1059\0\u1074\0\u108f"+
    "\0\u10aa\0\u10c5\0\u10e0\0\u10fb\0\u1116\0\u1131\0\u114c\0\u1167"+
    "\0\u1182\0\u119d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\2\6\2\7\2\2"+
    "\1\7\1\10\1\2\1\11\3\7\2\6\1\12\2\2"+
    "\2\13\1\14\1\15\34\0\2\16\1\17\1\20\2\21"+
    "\2\22\1\23\1\0\1\22\1\24\1\0\4\22\2\21"+
    "\10\0\2\16\1\17\1\20\2\25\2\22\1\23\1\0"+
    "\1\22\1\24\1\0\4\22\2\25\10\0\2\26\1\27"+
    "\1\20\1\25\1\30\2\22\1\23\1\0\1\22\1\24"+
    "\1\0\4\22\1\31\1\32\10\0\2\33\1\34\1\20"+
    "\2\32\2\22\1\23\1\0\1\22\1\24\1\0\4\22"+
    "\2\32\10\0\3\35\1\0\2\35\2\36\1\37\1\40"+
    "\1\36\1\22\1\0\1\41\3\36\2\35\10\0\3\22"+
    "\1\0\4\22\1\37\1\0\2\22\1\0\6\22\10\0"+
    "\3\35\1\0\2\35\2\36\1\37\1\40\1\36\1\22"+
    "\1\0\1\41\1\42\2\36\2\35\34\0\1\2\34\0"+
    "\1\2\34\0\1\2\33\0\1\2\1\0\2\43\1\44"+
    "\1\45\2\46\2\22\1\47\1\0\2\22\1\0\4\22"+
    "\1\46\1\50\10\0\2\43\1\44\1\45\1\46\1\51"+
    "\2\22\1\47\1\0\2\22\1\0\4\22\1\51\1\32"+
    "\10\0\3\52\1\0\2\52\13\0\1\52\11\0\2\53"+
    "\1\54\1\45\2\51\2\22\1\47\1\0\2\22\1\0"+
    "\4\22\1\51\1\32\10\0\2\55\1\56\1\0\2\57"+
    "\2\60\1\0\1\40\1\60\1\61\1\0\4\60\2\57"+
    "\10\0\3\35\1\0\2\35\2\24\1\37\1\40\1\24"+
    "\1\22\1\0\4\24\2\35\10\0\2\53\1\54\1\2"+
    "\2\51\2\22\1\47\1\0\2\22\1\0\4\22\1\51"+
    "\1\32\10\0\2\43\1\44\1\2\2\46\2\22\1\47"+
    "\1\0\2\22\1\0\4\22\1\46\1\50\10\0\2\43"+
    "\1\44\1\2\1\46\1\51\2\22\1\47\1\0\2\22"+
    "\1\0\4\22\1\51\1\32\10\0\2\33\1\34\1\2"+
    "\2\32\2\22\1\47\1\0\2\22\1\0\4\22\1\32"+
    "\1\62\10\0\2\33\1\34\1\2\2\32\2\22\1\47"+
    "\1\0\2\22\1\0\4\22\2\32\10\0\2\63\1\64"+
    "\1\2\2\62\2\22\1\47\1\0\2\22\1\0\4\22"+
    "\2\62\10\0\2\65\1\66\1\2\2\67\2\22\1\47"+
    "\1\0\2\22\1\0\4\22\2\67\10\0\2\65\1\66"+
    "\1\2\1\67\1\62\2\22\1\47\1\0\2\22\1\0"+
    "\4\22\2\62\10\0\3\22\1\0\4\22\1\70\1\0"+
    "\1\22\1\24\1\0\6\22\10\0\3\61\1\0\4\61"+
    "\2\0\2\61\1\0\6\61\10\0\3\71\1\0\4\71"+
    "\2\0\2\71\1\0\6\71\10\0\3\35\1\0\2\35"+
    "\2\36\1\37\1\40\1\36\1\22\1\0\1\41\1\72"+
    "\2\36\2\35\10\0\3\35\1\0\2\35\2\36\1\37"+
    "\1\40\1\36\1\22\1\0\1\41\1\73\2\36\2\35"+
    "\10\0\3\74\1\2\2\74\2\22\1\47\1\0\2\22"+
    "\1\0\4\22\2\74\10\0\3\74\1\2\1\74\1\75"+
    "\2\22\1\47\1\0\2\22\1\0\4\22\2\75\10\0"+
    "\3\75\1\2\2\75\2\22\1\47\1\0\2\22\1\0"+
    "\4\22\2\75\10\0\2\76\1\77\1\0\2\100\2\61"+
    "\2\0\2\61\1\0\4\61\2\100\10\0\3\101\1\0"+
    "\2\101\13\0\2\101\10\0\3\100\1\0\2\100\2\61"+
    "\1\102\1\0\1\61\1\60\1\103\4\61\2\100\10\0"+
    "\3\100\1\0\1\100\1\104\2\61\1\102\1\0\1\61"+
    "\1\60\1\103\4\61\1\100\1\105\10\0\3\105\1\0"+
    "\2\105\2\61\1\102\1\0\1\61\1\60\1\103\4\61"+
    "\2\105\10\0\3\106\1\0\2\106\2\60\1\107\1\40"+
    "\1\60\1\61\1\103\4\60\2\106\10\0\3\61\1\0"+
    "\4\61\1\107\1\0\2\61\1\103\6\61\10\0\2\63"+
    "\1\64\1\2\2\62\2\22\1\110\1\0\2\22\1\0"+
    "\4\22\2\62\10\0\2\65\1\66\1\2\2\67\2\22"+
    "\1\110\1\0\2\22\1\0\4\22\2\67\10\0\2\65"+
    "\1\66\1\2\1\67\1\62\2\22\1\110\1\0\2\22"+
    "\1\0\4\22\2\62\10\0\3\106\1\0\2\106\2\60"+
    "\1\0\1\40\1\60\1\61\1\0\4\60\2\106\10\0"+
    "\3\71\1\0\4\71\1\111\1\0\2\71\1\0\6\71"+
    "\10\0\3\35\1\0\2\35\2\36\1\37\1\40\1\36"+
    "\1\22\1\0\1\41\1\112\2\36\2\35\10\0\3\35"+
    "\1\0\2\35\2\36\1\37\1\40\1\36\1\22\1\0"+
    "\1\41\1\36\1\113\1\36\2\35\10\0\3\114\1\2"+
    "\2\114\1\115\1\22\1\110\1\0\2\22\1\0\2\22"+
    "\1\115\1\22\2\114\3\116\5\0\3\100\1\0\2\100"+
    "\2\61\1\117\1\0\2\61\1\103\4\61\2\100\10\0"+
    "\3\100\1\0\1\100\1\104\2\61\1\117\1\0\2\61"+
    "\1\103\4\61\1\100\1\105\10\0\3\105\1\0\2\105"+
    "\2\61\1\117\1\0\2\61\1\103\4\61\2\105\10\0"+
    "\3\120\1\0\2\120\1\121\10\0\1\121\1\0\2\120"+
    "\3\122\5\0\2\123\1\124\1\0\2\125\2\126\1\0"+
    "\1\40\1\126\1\127\1\0\4\126\2\125\10\0\3\130"+
    "\1\0\4\130\2\0\2\130\1\0\6\130\10\0\3\105"+
    "\1\0\2\105\2\61\1\117\1\0\2\61\1\103\4\61"+
    "\1\105\1\131\10\0\3\131\1\0\2\131\2\61\1\117"+
    "\1\0\2\61\1\103\4\61\2\131\10\0\3\61\1\0"+
    "\4\61\1\132\1\0\1\61\1\60\1\103\6\61\10\0"+
    "\3\127\1\0\4\127\2\0\2\127\1\0\6\127\10\0"+
    "\2\133\1\134\1\0\2\135\2\61\2\0\2\61\1\0"+
    "\4\61\2\135\10\0\3\136\1\0\4\136\2\0\2\136"+
    "\1\0\6\136\10\0\3\35\1\0\2\35\2\36\1\37"+
    "\1\40\1\36\1\22\1\0\1\41\1\36\1\137\1\36"+
    "\2\35\10\0\3\35\1\140\2\35\2\36\1\37\1\40"+
    "\1\36\1\22\1\0\1\41\2\36\1\141\2\35\10\0"+
    "\3\114\1\2\2\114\2\22\1\110\1\0\2\22\1\0"+
    "\4\22\2\114\10\0\3\22\1\0\3\22\1\142\1\143"+
    "\1\0\2\22\1\0\6\22\10\0\3\120\1\0\2\120"+
    "\1\144\10\0\1\144\1\0\2\120\3\116\5\0\2\145"+
    "\1\146\1\0\2\147\2\127\2\0\2\127\1\0\4\127"+
    "\2\147\10\0\3\120\1\0\2\120\13\0\2\120\17\0"+
    "\1\150\1\151\30\0\1\121\10\0\1\121\3\0\3\122"+
    "\5\0\3\147\1\0\2\147\2\127\1\152\1\0\1\127"+
    "\1\126\1\103\4\127\2\147\10\0\3\147\1\0\1\147"+
    "\1\153\2\127\1\152\1\0\1\127\1\126\1\103\4\127"+
    "\1\147\1\154\10\0\3\154\1\0\2\154\2\127\1\152"+
    "\1\0\1\127\1\126\1\103\4\127\2\154\10\0\3\155"+
    "\1\0\2\155\2\126\1\156\1\40\1\126\1\127\1\103"+
    "\4\126\2\155\10\0\3\127\1\0\4\127\1\156\1\0"+
    "\2\127\1\103\6\127\10\0\3\130\1\0\4\130\2\0"+
    "\2\130\1\157\6\130\10\0\3\131\1\0\2\131\2\61"+
    "\1\160\1\0\2\61\1\103\4\61\2\131\10\0\3\155"+
    "\1\0\2\155\2\126\1\0\1\40\1\126\1\127\1\0"+
    "\4\126\2\155\10\0\3\135\1\0\2\135\2\61\1\160"+
    "\1\0\2\61\1\103\4\61\2\135\10\0\3\135\1\0"+
    "\1\135\1\161\2\61\1\160\1\0\2\61\1\103\4\61"+
    "\1\135\1\162\10\0\3\162\1\0\2\162\2\61\1\160"+
    "\1\0\2\61\1\103\4\61\2\162\10\0\3\136\1\0"+
    "\4\136\1\163\1\0\2\136\1\0\6\136\10\0\3\35"+
    "\1\164\2\35\2\36\1\37\1\40\1\36\1\22\1\0"+
    "\1\41\2\36\1\165\2\35\24\0\1\166\16\0\3\35"+
    "\1\140\2\35\2\36\1\37\1\40\1\36\1\22\1\0"+
    "\1\41\3\36\2\35\10\0\3\167\1\0\2\167\2\22"+
    "\1\37\1\0\2\22\1\0\4\22\2\167\10\0\3\61"+
    "\1\0\3\61\1\170\2\0\2\61\1\0\6\61\17\0"+
    "\1\171\1\172\22\0\3\147\1\0\2\147\2\127\1\173"+
    "\1\0\2\127\1\103\4\127\2\147\10\0\3\147\1\0"+
    "\1\147\1\153\2\127\1\173\1\0\2\127\1\103\4\127"+
    "\1\147\1\154\10\0\3\154\1\0\2\154\2\127\1\173"+
    "\1\0\2\127\1\103\4\127\2\154\17\0\1\174\23\0"+
    "\2\175\1\176\1\0\2\177\2\200\1\0\1\40\1\200"+
    "\1\201\1\0\4\200\2\177\10\0\3\154\1\0\2\154"+
    "\2\127\1\173\1\0\2\127\1\103\4\127\1\154\1\202"+
    "\10\0\3\202\1\0\2\202\2\127\1\173\1\0\2\127"+
    "\1\103\4\127\2\202\10\0\3\127\1\0\4\127\1\203"+
    "\1\0\1\127\1\126\1\103\6\127\10\0\3\201\1\0"+
    "\4\201\2\0\2\201\1\0\6\201\10\0\3\130\1\0"+
    "\4\130\2\0\2\130\1\103\6\130\10\0\2\204\1\205"+
    "\1\0\2\206\2\127\2\0\2\127\1\0\4\127\2\206"+
    "\10\0\3\162\1\0\2\162\2\61\1\160\1\0\2\61"+
    "\1\103\4\61\1\162\1\61\10\0\3\61\1\0\4\61"+
    "\1\160\1\0\2\61\1\103\6\61\10\0\3\207\1\0"+
    "\4\207\2\0\2\207\1\0\6\207\24\0\1\210\16\0"+
    "\3\35\1\164\2\35\2\36\1\37\1\40\1\36\1\22"+
    "\1\0\1\41\3\36\2\35\24\0\1\211\16\0\3\61"+
    "\1\0\4\61\1\212\1\0\2\61\1\103\6\61\17\0"+
    "\1\213\23\0\2\214\1\215\1\0\2\216\2\201\2\0"+
    "\2\201\1\0\4\201\2\216\20\0\1\150\22\0\3\216"+
    "\1\0\2\216\2\201\1\217\1\0\1\201\1\200\1\103"+
    "\4\201\2\216\10\0\3\216\1\0\1\216\1\220\2\201"+
    "\1\217\1\0\1\201\1\200\1\103\4\201\1\216\1\221"+
    "\10\0\3\221\1\0\2\221\2\201\1\217\1\0\1\201"+
    "\1\200\1\103\4\201\2\221\10\0\3\222\1\0\2\222"+
    "\2\200\1\223\1\40\1\200\1\201\1\103\4\200\2\222"+
    "\10\0\3\201\1\0\4\201\1\223\1\0\2\201\1\103"+
    "\6\201\10\0\3\202\1\0\2\202\2\127\1\224\1\0"+
    "\2\127\1\103\4\127\2\202\10\0\3\222\1\0\2\222"+
    "\2\200\1\0\1\40\1\200\1\201\1\0\4\200\2\222"+
    "\10\0\3\206\1\0\2\206\2\127\1\224\1\0\2\127"+
    "\1\103\4\127\2\206\10\0\3\206\1\0\1\206\1\225"+
    "\2\127\1\224\1\0\2\127\1\103\4\127\1\206\1\226"+
    "\10\0\3\226\1\0\2\226\2\127\1\224\1\0\2\127"+
    "\1\103\4\127\2\226\10\0\3\207\1\0\4\207\1\227"+
    "\1\0\2\207\1\0\6\207\24\0\1\230\16\0\3\231"+
    "\1\0\4\231\2\0\2\231\1\232\6\231\10\0\3\233"+
    "\1\0\2\233\2\127\2\0\2\127\1\0\4\127\2\233"+
    "\20\0\1\171\22\0\3\216\1\0\2\216\2\201\1\223"+
    "\1\0\2\201\1\103\4\201\2\216\10\0\3\216\1\0"+
    "\1\216\1\220\2\201\1\223\1\0\2\201\1\103\4\201"+
    "\1\216\1\221\10\0\3\221\1\0\2\221\2\201\1\223"+
    "\1\0\2\201\1\103\4\201\2\221\10\0\3\234\1\0"+
    "\2\234\2\235\1\0\1\40\1\235\1\236\1\0\4\235"+
    "\2\234\10\0\3\221\1\0\2\221\2\201\1\223\1\0"+
    "\2\201\1\103\4\201\1\221\1\237\10\0\3\237\1\0"+
    "\2\237\2\201\1\223\1\0\2\201\1\103\4\201\2\237"+
    "\10\0\3\201\1\0\4\201\1\217\1\0\1\201\1\200"+
    "\1\103\6\201\10\0\3\236\1\0\4\236\2\0\2\236"+
    "\1\0\6\236\10\0\2\240\1\241\1\0\2\242\2\201"+
    "\2\0\2\201\1\0\4\201\2\242\10\0\3\226\1\0"+
    "\2\226\2\127\1\224\1\0\2\127\1\103\4\127\1\226"+
    "\1\127\10\0\3\127\1\0\4\127\1\224\1\0\2\127"+
    "\1\103\6\127\10\0\3\243\1\0\4\243\2\0\2\243"+
    "\1\0\6\243\10\0\3\244\1\0\4\244\2\0\2\244"+
    "\1\0\6\244\10\0\3\231\1\0\4\231\1\245\1\0"+
    "\2\231\1\0\6\231\10\0\3\244\1\0\4\244\2\0"+
    "\2\244\1\232\6\244\10\0\3\233\1\0\2\233\2\127"+
    "\1\156\1\0\2\127\1\103\4\127\2\233\10\0\3\236"+
    "\1\0\4\236\1\246\1\0\1\236\1\235\1\0\6\236"+
    "\10\0\3\242\1\0\2\242\2\201\1\223\1\0\2\201"+
    "\1\103\4\201\2\242\10\0\3\242\1\0\1\242\1\247"+
    "\2\201\1\223\1\0\2\201\1\103\4\201\1\242\1\250"+
    "\10\0\3\250\1\0\2\250\2\201\1\223\1\0\2\201"+
    "\1\103\4\201\2\250\10\0\3\243\1\0\4\243\1\223"+
    "\1\0\2\243\1\0\6\243\10\0\3\244\1\0\4\244"+
    "\1\251\1\0\2\244\1\0\6\244\10\0\3\252\1\0"+
    "\4\252\2\0\2\252\1\0\6\252\10\0\3\253\1\0"+
    "\2\253\2\246\1\0\1\40\1\246\2\0\4\246\2\253"+
    "\10\0\3\250\1\0\2\250\2\201\1\223\1\0\2\201"+
    "\1\103\4\201\1\250\1\201\10\0\3\254\1\0\4\254"+
    "\2\0\2\254\1\0\6\254\10\0\3\252\1\0\4\252"+
    "\1\255\1\0\2\252\1\256\6\252\20\0\1\246\2\0"+
    "\1\246\17\0\3\254\1\0\4\254\1\257\1\0\2\254"+
    "\1\260\6\254\10\0\3\261\1\0\4\261\2\0\2\261"+
    "\1\0\6\261\10\0\3\262\1\0\4\262\2\0\2\262"+
    "\1\0\6\262\10\0\3\263\1\0\4\263\2\0\2\263"+
    "\1\0\6\263\10\0\3\264\1\0\4\264\2\0\2\264"+
    "\1\0\6\264\10\0\3\261\1\0\4\261\1\265\1\0"+
    "\2\261\1\256\6\261\10\0\3\262\1\0\4\262\2\0"+
    "\2\262\1\266\6\262\10\0\3\263\1\0\4\263\1\267"+
    "\1\0\2\263\1\260\6\263\10\0\3\264\1\0\4\264"+
    "\2\0\2\264\1\270\6\264\10\0\3\271\1\0\4\271"+
    "\2\0\2\271\1\0\6\271\10\0\3\262\1\0\4\262"+
    "\2\0\2\262\1\256\6\262\10\0\3\272\1\0\4\272"+
    "\2\0\2\272\1\0\6\272\10\0\3\264\1\0\4\264"+
    "\2\0\2\264\1\260\6\264\10\0\3\271\1\0\4\271"+
    "\2\0\2\271\1\256\6\271\10\0\3\272\1\0\4\272"+
    "\2\0\2\272\1\260\6\272\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4536];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\25\0\4\1\1\0\1\1\4\0"+
    "\5\1\3\0\3\1\4\0\6\1\2\0\3\1\5\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\10\1\1\0"+
    "\4\1\3\0\1\1\2\0\3\1\1\11\2\0\3\1"+
    "\1\0\1\1\1\0\2\1\4\0\3\1\3\0\6\1"+
    "\1\0\4\1\2\0\1\1\1\0\3\1\1\0\3\1"+
    "\2\0\2\1\4\0\11\1\3\0\2\1\1\0\1\1"+
    "\1\0\1\1\4\0\4\1\1\0\1\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  void echo() {
    int len = yylength();       // Find length of current lexeme
    for (int i=0; i<len; i++) { // Run through each character in turn
      char c = yycharat(i);   
      switch (c) {              // and translate as appropriate ...
        case '<' : System.out.print("&lt;");  break;
        case '>' : System.out.print("&gt;");  break;
        case '&' : System.out.print("&amp;"); break;
        default  : System.out.print(c);       break;
      }
    }
  }
  void tag(String cl) {
    System.out.print("<a href=\"" + cl + "://");
    echo();
    System.out.print("\">");
    echo();
    System.out.print("</a>");
  }
  void tag2() {
    System.out.print("<a href=\"" );
    echo();
    System.out.print("\">");
    echo();
    System.out.print("</a>");
  }
  void time12()     { tag("clock"); }
  void time24()     { tag("clock"); }
  void email()      { tag("mailto"); }
  void ipAdd()      { tag("ping"); }
  void website()    { tag("http"); }
  void preWeb()     { tag2(); }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AutoLight(java.io.Reader in) {
    System.out.println("<html>");
  System.out.println("<head>");
  System.out.println("<title>My AutoLight Web Page</title>");
  System.out.println("<style type=\"text/css\">");
  System.out.println("  body     {white-space:pre;");
  System.out.println("            background-color:#ffffcc;");
  System.out.println("            color:black;");
  System.out.println("            font-family:\"Lucida Console\",\"Courier New\",Monotype}");
  System.out.println("</style>");
  System.out.println("</head>");
  System.out.println("<body>");
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AutoLight(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      System.out.println("</body>");
  System.out.println("</html>");

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { ipAdd();
          }
        case 8: break;
        case 1: 
          { echo();
          }
        case 9: break;
        case 7: 
          { preWeb();
          }
        case 10: break;
        case 5: 
          { email();
          }
        case 11: break;
        case 2: 
          { website();
          }
        case 12: break;
        case 4: 
          { time12();
          }
        case 13: break;
        case 3: 
          { time24();
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AutoLight <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AutoLight scanner = null;
        try {
          scanner = new AutoLight( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
